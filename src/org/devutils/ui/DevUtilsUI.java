/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.devutils.ui;

import org.devutils.serverops.ServerOperations;
import org.devutils.task.RunHealthCheckTask;
import org.devutils.unixops.Authenticator;
import org.devutils.utils.JsonPropertyUtility;
import org.devutils.utils.XMLPropertyUtility;
import org.devutils.vo.ContainerVO;
import org.devutils.vo.EnvironmentVO;
import org.devutils.vo.ProcessVO;
import org.devutils.vo.ServerVO;
import org.devutils.vo.UnixServerVO;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

/**
 * @author Arunan Ramanathan
 * @date 23/07/2015
 */
public class DevUtilsUI extends javax.swing.JFrame {

    private static final String DEFAULT_COMBO_BOX_ITEM = "---select---";

    public DevUtilsUI() {
        initComponents();
        //Parse XML file and create a map
        XMLPropertyUtility.initProperties();
        JsonPropertyUtility.createUnixServerMap();
        JsonPropertyUtility.createProcessMap();
        loadServerNameComboBoxs();
        loadRemoteServerComboBoxes();
        loadEnvironmentComboBoxes();
        loadProcessComboBox();
        uiSettings();
    }

    public void uiSettings() {
        environmentEditorPane.setContentType("text/html");
        //environmentEditorPane.setText("customer management : <font color=\"green\"> running</font>");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainTabbedPane = new javax.swing.JTabbedPane();
        startStopServersTabbedPane = new javax.swing.JTabbedPane();
        manageServersPanel = new javax.swing.JPanel();
        listServerComboBox = new javax.swing.JComboBox();
        startServerButton = new javax.swing.JButton();
        forkServerTabbedPane = new javax.swing.JTabbedPane();
        stopServerButton = new javax.swing.JButton();
        curlButton = new javax.swing.JButton();
        configureServersPanel = new javax.swing.JPanel();
        existingServersLabel = new javax.swing.JLabel();
        existingServersComboBox = new javax.swing.JComboBox();
        serverDirectoryLabel = new javax.swing.JLabel();
        serverDirectoryTextField = new javax.swing.JTextField();
        commandToExecuteLabel = new javax.swing.JLabel();
        commandToExecuteTextField = new javax.swing.JTextField();
        saveServerButton = new javax.swing.JButton();
        serverNameLabel = new javax.swing.JLabel();
        serverNameTextField = new javax.swing.JTextField();
        typeOfServerLabel = new javax.swing.JLabel();
        typeOfServerComboBox = new javax.swing.JComboBox();
        portLabel = new javax.swing.JLabel();
        portTextField = new javax.swing.JTextField();
        clearButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        monitorRemoteProcessTabbedPane = new javax.swing.JTabbedPane();
        monitorRemoteProcessDashboardPanel = new javax.swing.JPanel();
        listEnvironmentLabel = new javax.swing.JLabel();
        listEnvironmentComboBox = new javax.swing.JComboBox();
        runHealthCheckButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        environmentEditorPane = new javax.swing.JEditorPane();
        dashboardProgressBar = new javax.swing.JProgressBar();
        jScrollPane2 = new javax.swing.JScrollPane();
        remoteProcessTextArea = new javax.swing.JTextArea();
        configureRemoteProcessPanel = new javax.swing.JPanel();
        environmentInternalFrame = new javax.swing.JInternalFrame();
        environmentNameLabel = new javax.swing.JLabel();
        environmentNameTextField = new javax.swing.JTextField();
        saveEnvironmentButton = new javax.swing.JButton();
        processInternalFrame = new javax.swing.JInternalFrame();
        processNameLabel = new javax.swing.JLabel();
        processNameTextField = new javax.swing.JTextField();
        processRunningonPortLabel = new javax.swing.JLabel();
        processRunningonPortTextField = new javax.swing.JTextField();
        processRunningonServerLabel = new javax.swing.JLabel();
        processRunningonServerComboBox = new javax.swing.JComboBox();
        environmentLabel = new javax.swing.JLabel();
        environmentComboBox = new javax.swing.JComboBox();
        saveProcessButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        processComboBox = new javax.swing.JComboBox();
        clearProcessButton = new javax.swing.JButton();
        configureRemoteServersPanel = new javax.swing.JPanel();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        availableServersLabel = new javax.swing.JLabel();
        availableServersComboBox = new javax.swing.JComboBox();
        hostNameLabel = new javax.swing.JLabel();
        hostNameTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        userNameTextField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        serverPasswordTextField = new javax.swing.JPasswordField();
        saveRemoteServerButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        listServerComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));

        startServerButton.setText("Start");
        startServerButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startServerButtonMouseClicked(evt);
            }
        });

        stopServerButton.setText("Stop");
        stopServerButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stopServerButtonMouseClicked(evt);
            }
        });

        curlButton.setText("Curl");
        curlButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                curlButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout manageServersPanelLayout = new javax.swing.GroupLayout(manageServersPanel);
        manageServersPanel.setLayout(manageServersPanelLayout);
        manageServersPanelLayout.setHorizontalGroup(
            manageServersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageServersPanelLayout.createSequentialGroup()
                .addGroup(manageServersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageServersPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(forkServerTabbedPane))
                    .addGroup(manageServersPanelLayout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(listServerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(startServerButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(stopServerButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(curlButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 471, Short.MAX_VALUE)))
                .addContainerGap())
        );
        manageServersPanelLayout.setVerticalGroup(
            manageServersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageServersPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(manageServersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listServerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(manageServersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(startServerButton)
                        .addComponent(stopServerButton)
                        .addComponent(curlButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(forkServerTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 571, Short.MAX_VALUE)
                .addContainerGap())
        );

        startStopServersTabbedPane.addTab("    Manage Local Servers   ", manageServersPanel);

        configureServersPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                configureServersPanelMouseClicked(evt);
            }
        });

        existingServersLabel.setText("Existing Servers");

        existingServersComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] {}));
        existingServersComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                existingServersComboBoxItemStateChanged(evt);
            }
        });
        existingServersComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                existingServersComboBoxMouseClicked(evt);
            }
        });
        existingServersComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                existingServersComboBoxActionPerformed(evt);
            }
        });
        existingServersComboBox.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                existingServersComboBoxPropertyChange(evt);
            }
        });

        serverDirectoryLabel.setText("Server Directory");

        commandToExecuteLabel.setText("Command To Execute");

        saveServerButton.setText("Save");
        saveServerButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveServerButtonMouseClicked(evt);
            }
        });

        serverNameLabel.setText("Server Name");

        typeOfServerLabel.setText("Type of Server");

        typeOfServerComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PlayServer", "Zookeeper", "Tomcat", "Jboss", "Weblogic" }));

        portLabel.setText("HTTP Port");

        clearButton.setText("Clear");
        clearButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout configureServersPanelLayout = new javax.swing.GroupLayout(configureServersPanel);
        configureServersPanel.setLayout(configureServersPanelLayout);
        configureServersPanelLayout.setHorizontalGroup(
            configureServersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configureServersPanelLayout.createSequentialGroup()
                .addGroup(configureServersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(configureServersPanelLayout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addGroup(configureServersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(configureServersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(portLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(typeOfServerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(commandToExecuteLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(serverDirectoryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(serverNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(existingServersLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(configureServersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(portTextField)
                            .addComponent(serverNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                            .addComponent(serverDirectoryTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                            .addComponent(commandToExecuteTextField)
                            .addComponent(typeOfServerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(existingServersComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(configureServersPanelLayout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(saveServerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(302, Short.MAX_VALUE))
        );
        configureServersPanelLayout.setVerticalGroup(
            configureServersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configureServersPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(configureServersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(existingServersComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(existingServersLabel))
                .addGap(21, 21, 21)
                .addGroup(configureServersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typeOfServerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(typeOfServerLabel))
                .addGap(18, 18, 18)
                .addGroup(configureServersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serverDirectoryLabel))
                .addGap(18, 18, 18)
                .addGroup(configureServersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(commandToExecuteLabel)
                    .addComponent(commandToExecuteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(configureServersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portLabel)
                    .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(configureServersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverNameLabel)
                    .addComponent(serverNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(configureServersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveServerButton)
                    .addComponent(clearButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        startStopServersTabbedPane.addTab("   Configure Local Servers   ", configureServersPanel);

        mainTabbedPane.addTab("   Start/Stop Servers  ", startStopServersTabbedPane);

        listEnvironmentLabel.setText("Environment");

        listEnvironmentComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] {  }));

        runHealthCheckButton.setText("   Run Health Check  ");
        runHealthCheckButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                runHealthCheckButtonMouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(environmentEditorPane);

        remoteProcessTextArea.setBackground(new java.awt.Color(51, 0, 51));
        remoteProcessTextArea.setColumns(20);
        remoteProcessTextArea.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        remoteProcessTextArea.setForeground(new java.awt.Color(153, 255, 102));
        remoteProcessTextArea.setRows(5);
        jScrollPane2.setViewportView(remoteProcessTextArea);

        javax.swing.GroupLayout monitorRemoteProcessDashboardPanelLayout = new javax.swing.GroupLayout(monitorRemoteProcessDashboardPanel);
        monitorRemoteProcessDashboardPanel.setLayout(monitorRemoteProcessDashboardPanelLayout);
        monitorRemoteProcessDashboardPanelLayout.setHorizontalGroup(
            monitorRemoteProcessDashboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, monitorRemoteProcessDashboardPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(monitorRemoteProcessDashboardPanelLayout.createSequentialGroup()
                .addGroup(monitorRemoteProcessDashboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(monitorRemoteProcessDashboardPanelLayout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addComponent(listEnvironmentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(listEnvironmentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addComponent(runHealthCheckButton, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(monitorRemoteProcessDashboardPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(dashboardProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        monitorRemoteProcessDashboardPanelLayout.setVerticalGroup(
            monitorRemoteProcessDashboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(monitorRemoteProcessDashboardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(monitorRemoteProcessDashboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listEnvironmentLabel)
                    .addComponent(listEnvironmentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(runHealthCheckButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(monitorRemoteProcessDashboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dashboardProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        monitorRemoteProcessTabbedPane.addTab("   Dashboard  ", monitorRemoteProcessDashboardPanel);

        environmentInternalFrame.setVisible(true);

        environmentNameLabel.setText("Environment Name");

        saveEnvironmentButton.setText("Save");
        saveEnvironmentButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveEnvironmentButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout environmentInternalFrameLayout = new javax.swing.GroupLayout(environmentInternalFrame.getContentPane());
        environmentInternalFrame.getContentPane().setLayout(environmentInternalFrameLayout);
        environmentInternalFrameLayout.setHorizontalGroup(
            environmentInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(environmentInternalFrameLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(environmentNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(environmentInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saveEnvironmentButton)
                    .addComponent(environmentNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        environmentInternalFrameLayout.setVerticalGroup(
            environmentInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(environmentInternalFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(environmentInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(environmentNameLabel)
                    .addComponent(environmentNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(saveEnvironmentButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        processInternalFrame.setVisible(true);

        processNameLabel.setText("Process Name ");

        processRunningonPortLabel.setText("Process Running on Port");

        processRunningonServerLabel.setText("Process Running on Server");

        processRunningonServerComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));

        environmentLabel.setText("Environment");

        environmentComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));

        saveProcessButton.setText("  Save  ");
        saveProcessButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveProcessButtonMouseClicked(evt);
            }
        });

        jLabel2.setText("Processes");

        processComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));
        processComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processComboBoxActionPerformed(evt);
            }
        });

        clearProcessButton.setText("Clear");
        clearProcessButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearProcessButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout processInternalFrameLayout = new javax.swing.GroupLayout(processInternalFrame.getContentPane());
        processInternalFrame.getContentPane().setLayout(processInternalFrameLayout);
        processInternalFrameLayout.setHorizontalGroup(
            processInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(processInternalFrameLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(processInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(saveProcessButton)
                    .addGroup(processInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(processInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(processRunningonServerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(processRunningonPortLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(processNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(environmentLabel)
                        .addComponent(jLabel2)))
                .addGap(26, 26, 26)
                .addGroup(processInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(processInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(processNameTextField)
                        .addComponent(processRunningonPortTextField)
                        .addComponent(processRunningonServerComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(environmentComboBox, 0, 143, Short.MAX_VALUE)
                        .addComponent(processComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(clearProcessButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        processInternalFrameLayout.setVerticalGroup(
            processInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(processInternalFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(processInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(processComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(22, 22, 22)
                .addGroup(processInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(processNameLabel)
                    .addComponent(processNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(processInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(processRunningonPortLabel)
                    .addComponent(processRunningonPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(processInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(processRunningonServerLabel)
                    .addComponent(processRunningonServerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(processInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(environmentLabel)
                    .addComponent(environmentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(processInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveProcessButton)
                    .addComponent(clearProcessButton))
                .addContainerGap(173, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout configureRemoteProcessPanelLayout = new javax.swing.GroupLayout(configureRemoteProcessPanel);
        configureRemoteProcessPanel.setLayout(configureRemoteProcessPanelLayout);
        configureRemoteProcessPanelLayout.setHorizontalGroup(
            configureRemoteProcessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configureRemoteProcessPanelLayout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(environmentInternalFrame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(processInternalFrame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(109, Short.MAX_VALUE))
        );
        configureRemoteProcessPanelLayout.setVerticalGroup(
            configureRemoteProcessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, configureRemoteProcessPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(configureRemoteProcessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(processInternalFrame)
                    .addComponent(environmentInternalFrame))
                .addGap(341, 341, 341))
        );

        monitorRemoteProcessTabbedPane.addTab("   Configure Remote Process    ", configureRemoteProcessPanel);

        jInternalFrame1.setVisible(true);

        availableServersLabel.setText("Available Servers");

        availableServersComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));
        availableServersComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availableServersComboBoxActionPerformed(evt);
            }
        });

        hostNameLabel.setText("Host Name");

        jLabel1.setText("User Name");

        passwordLabel.setText("Password");

        saveRemoteServerButton.setText("Save");
        saveRemoteServerButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveRemoteServerButtonMouseClicked(evt);
            }
        });
        saveRemoteServerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveRemoteServerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(passwordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(hostNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(availableServersLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saveRemoteServerButton)
                    .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(availableServersComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(hostNameTextField)
                        .addComponent(userNameTextField)
                        .addComponent(serverPasswordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(availableServersLabel)
                    .addComponent(availableServersComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(hostNameTextField)
                    .addComponent(hostNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(userNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(serverPasswordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(saveRemoteServerButton)
                .addContainerGap(208, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout configureRemoteServersPanelLayout = new javax.swing.GroupLayout(configureRemoteServersPanel);
        configureRemoteServersPanel.setLayout(configureRemoteServersPanelLayout);
        configureRemoteServersPanelLayout.setHorizontalGroup(
            configureRemoteServersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configureRemoteServersPanelLayout.createSequentialGroup()
                .addGap(272, 272, 272)
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(313, Short.MAX_VALUE))
        );
        configureRemoteServersPanelLayout.setVerticalGroup(
            configureRemoteServersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, configureRemoteServersPanelLayout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(109, Short.MAX_VALUE))
        );

        monitorRemoteProcessTabbedPane.addTab("   Configure Remote Servers", configureRemoteServersPanel);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(monitorRemoteProcessTabbedPane)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(monitorRemoteProcessTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 655, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        mainTabbedPane.addTab("  Monitor remote process  ", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainTabbedPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(mainTabbedPane)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startServerButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startServerButtonMouseClicked

        String selectedServer = (String) listServerComboBox.getSelectedItem();

        JTextArea serverTextArea = new JTextArea();
        serverTextArea.setColumns(20);
        serverTextArea.setRows(5);

        JScrollPane serverScrollPane = new javax.swing.JScrollPane();
        serverScrollPane.setViewportView(serverTextArea);

        forkServerTabbedPane.addTab(selectedServer, serverScrollPane);

        ContainerVO.getScrollPaneMap().put(selectedServer, serverScrollPane);

        serverTextArea.requestFocus();

        ContainerVO.getTextAreaMap().put(selectedServer, serverTextArea);

        ServerOperations ops = new ServerOperations();
        ops.startServer(selectedServer);
    }//GEN-LAST:event_startServerButtonMouseClicked

    private void stopServerButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopServerButtonMouseClicked
        String selectedServer = (String) listServerComboBox.getSelectedItem();
        ServerOperations ops = new ServerOperations();
        ops.stopServer(selectedServer);
    }//GEN-LAST:event_stopServerButtonMouseClicked

    private void curlButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_curlButtonMouseClicked
        String selectedServer = (String) listServerComboBox.getSelectedItem();
        ServerOperations ops = new ServerOperations();
        ops.makeCurlRequest(selectedServer);
    }//GEN-LAST:event_curlButtonMouseClicked

    private void saveServerButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveServerButtonMouseClicked
        String type = (String) typeOfServerComboBox.getSelectedItem();
        String directory = serverDirectoryTextField.getText();
        String command = commandToExecuteTextField.getText();
        String port = portTextField.getText();
        String serverName = serverNameTextField.getText();
        XMLPropertyUtility.addNode(serverName, type, port, directory, command);
        XMLPropertyUtility.initProperties();
        loadServerNameComboBoxs();

        //Clear fields after saving
        serverDirectoryTextField.setText("");
        commandToExecuteTextField.setText("");
        portTextField.setText("");
        serverNameTextField.setText("");
        existingServersComboBox.setSelectedItem((DEFAULT_COMBO_BOX_ITEM));
    }//GEN-LAST:event_saveServerButtonMouseClicked

    private void existingServersComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_existingServersComboBoxActionPerformed
        String selectedString = (String) existingServersComboBox.getSelectedItem();
        if (selectedString != null && !selectedString.equals(DEFAULT_COMBO_BOX_ITEM)) {
            ServerVO server = ContainerVO.getPlayServerMap().get(selectedString);
            typeOfServerComboBox.setSelectedItem(server.getServerType());
            serverDirectoryTextField.setText(server.getServerPath());
            commandToExecuteTextField.setText(server.getCommand());
            portTextField.setText(server.getHttpPort());
            serverNameTextField.setText(server.getServerName());
        }
    }//GEN-LAST:event_existingServersComboBoxActionPerformed

    private void existingServersComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_existingServersComboBoxItemStateChanged

    }//GEN-LAST:event_existingServersComboBoxItemStateChanged

    private void existingServersComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_existingServersComboBoxMouseClicked

    }//GEN-LAST:event_existingServersComboBoxMouseClicked

    private void existingServersComboBoxPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_existingServersComboBoxPropertyChange

    }//GEN-LAST:event_existingServersComboBoxPropertyChange

    private void configureServersPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_configureServersPanelMouseClicked
    }//GEN-LAST:event_configureServersPanelMouseClicked

    private void clearButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearButtonMouseClicked
        serverDirectoryTextField.setText("");
        commandToExecuteTextField.setText("");
        portTextField.setText("");
        serverNameTextField.setText("");
        existingServersComboBox.setSelectedItem((DEFAULT_COMBO_BOX_ITEM));
    }//GEN-LAST:event_clearButtonMouseClicked

    private void saveRemoteServerButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveRemoteServerButtonMouseClicked
        String hostName = hostNameTextField.getText();
        String userName = userNameTextField.getText();
        String password = serverPasswordTextField.getText();

        JsonPropertyUtility.saveServerDetails(hostName, userName, password);  
        loadRemoteServerComboBoxes();
        
        hostNameTextField.setText("");
        userNameTextField.setText("");
        serverPasswordTextField.setText("");
        JsonPropertyUtility.createUnixServerMap();
    }//GEN-LAST:event_saveRemoteServerButtonMouseClicked

    private void saveRemoteServerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveRemoteServerButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveRemoteServerButtonActionPerformed

    private void availableServersComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availableServersComboBoxActionPerformed
        String selectedString = (String) availableServersComboBox.getSelectedItem();
        if (selectedString != null && !selectedString.equals(DEFAULT_COMBO_BOX_ITEM)) {
            UnixServerVO server = ContainerVO.getUnixServerMap().get(selectedString);
            hostNameTextField.setText(server.getHostName());
            userNameTextField.setText(server.getUserName());
            serverPasswordTextField.setText(server.getPassword());
        }
    }//GEN-LAST:event_availableServersComboBoxActionPerformed

    private void saveEnvironmentButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveEnvironmentButtonMouseClicked
        String environmentName = environmentNameTextField.getText();
        if (environmentName!= null && environmentName.length()>=1) {
            JsonPropertyUtility.saveEnvironmentDetails(environmentName);
        }
        loadEnvironmentComboBoxes();
        environmentNameTextField.setText("");
    }//GEN-LAST:event_saveEnvironmentButtonMouseClicked

    private void saveProcessButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveProcessButtonMouseClicked
        String processName = processNameTextField.getText();
        String port = processRunningonPortTextField.getText();
        if (processName != null && processName.length() >=1) {
            JsonPropertyUtility.saveProcessDetails(
                    (String)processRunningonServerComboBox.getSelectedItem(), 
                    (String)environmentComboBox.getSelectedItem(), 
                    port, 
                    processName);
        }
        loadProcessComboBox();
        processComboBox.setSelectedItem(DEFAULT_COMBO_BOX_ITEM);
        processNameTextField.setText("");
        processRunningonPortTextField.setText("");
        environmentComboBox.setSelectedItem(DEFAULT_COMBO_BOX_ITEM);
        JsonPropertyUtility.createProcessMap();
    }//GEN-LAST:event_saveProcessButtonMouseClicked

    private void processComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processComboBoxActionPerformed
        String selectedProcess = (String) processComboBox.getSelectedItem();
        
        if (selectedProcess != null && !selectedProcess.equals(DEFAULT_COMBO_BOX_ITEM)) {
            ProcessVO processVO = ContainerVO.getProcessMap().get(selectedProcess);
            processNameTextField.setText(processVO.getProcessName());
            processRunningonPortTextField.setText(processVO.getProcessPort());
            processRunningonServerComboBox.setSelectedItem(processVO.getProcessHost());
            environmentComboBox.setSelectedItem(processVO.getProcessEnvironment());
        }
        
    }//GEN-LAST:event_processComboBoxActionPerformed

    private void clearProcessButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearProcessButtonMouseClicked
        processNameTextField.setText("");
        processRunningonPortTextField.setText("");
        environmentComboBox.setSelectedItem(DEFAULT_COMBO_BOX_ITEM);
        processComboBox.setSelectedItem(DEFAULT_COMBO_BOX_ITEM);
    }//GEN-LAST:event_clearProcessButtonMouseClicked

    public static void addUIChangesForRunHealthCheck() {
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                dashboardProgressBar.setString("Processing...");
                dashboardProgressBar.setStringPainted(true);
                dashboardProgressBar.setIndeterminate(true);
                runHealthCheckButton.setEnabled(false);
            }
        });
    }

    public static void removeUIChangesForRunHealthCheck() {
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                dashboardProgressBar.setString("Analysis Completed!");
                dashboardProgressBar.setIndeterminate(false);
                runHealthCheckButton.setEnabled(true);
            }
        });
    }
        
    private void runHealthCheckButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_runHealthCheckButtonMouseClicked
        RunHealthCheckTask task = new RunHealthCheckTask();
        task.execute();
    }//GEN-LAST:event_runHealthCheckButtonMouseClicked

    private void loadServerNameComboBoxs() {
        List<String> listOfServerNames = XMLPropertyUtility.getServerNames();

        listServerComboBox.removeAllItems();

        for (String tempServerName : listOfServerNames) {
            listServerComboBox.addItem(tempServerName);
        }

        existingServersComboBox.removeAllItems();

        for (String tempServerName : listOfServerNames) {
            existingServersComboBox.addItem(tempServerName);
        }
    }

    private void loadRemoteServerComboBoxes() {
        List<UnixServerVO> unixServervos= JsonPropertyUtility.parseServerDetails();

        availableServersComboBox.removeAllItems();
        availableServersComboBox.addItem(DEFAULT_COMBO_BOX_ITEM);

        if (!unixServervos.isEmpty()) {
            for (UnixServerVO serverVo : unixServervos) {
                availableServersComboBox.addItem(serverVo.getHostName());
            }
        }
        processRunningonServerComboBox.removeAllItems();
        if (!unixServervos.isEmpty()) {
            for (UnixServerVO serverVo : unixServervos) {
                processRunningonServerComboBox.addItem(serverVo.getHostName());
            }
        }
    }
    
    private void loadEnvironmentComboBoxes() {
        List<EnvironmentVO> result = JsonPropertyUtility.parseEnvironmentDetails();
        
        environmentComboBox.removeAllItems();
        environmentComboBox.addItem(DEFAULT_COMBO_BOX_ITEM);

        if (!result.isEmpty()) {
            for (EnvironmentVO envVo : result) {
                environmentComboBox.addItem(envVo.getEnvironmentName());
            }
        }
        
        listEnvironmentComboBox.removeAllItems();
        listEnvironmentComboBox.addItem(DEFAULT_COMBO_BOX_ITEM);
        
        if (!result.isEmpty()) {
            for (EnvironmentVO envVo : result) {
                listEnvironmentComboBox.addItem(envVo.getEnvironmentName());
            }
        }
    }
    
    private void loadProcessComboBox() {
        List<ProcessVO> result = JsonPropertyUtility.parseProcessDetails();
        
        processComboBox.removeAllItems();
        processComboBox.addItem(DEFAULT_COMBO_BOX_ITEM);
        
        if (!result.isEmpty()) {
            for (ProcessVO proVO : result) {
                processComboBox.addItem(proVO.getProcessName());
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException 
                | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DevUtilsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new DevUtilsUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox availableServersComboBox;
    private javax.swing.JLabel availableServersLabel;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton clearProcessButton;
    private javax.swing.JLabel commandToExecuteLabel;
    private javax.swing.JTextField commandToExecuteTextField;
    private javax.swing.JPanel configureRemoteProcessPanel;
    private javax.swing.JPanel configureRemoteServersPanel;
    private javax.swing.JPanel configureServersPanel;
    private javax.swing.JButton curlButton;
    private static javax.swing.JProgressBar dashboardProgressBar;
    private javax.swing.JComboBox environmentComboBox;
    public static javax.swing.JEditorPane environmentEditorPane;
    private javax.swing.JInternalFrame environmentInternalFrame;
    private javax.swing.JLabel environmentLabel;
    private javax.swing.JLabel environmentNameLabel;
    private javax.swing.JTextField environmentNameTextField;
    private javax.swing.JComboBox existingServersComboBox;
    private javax.swing.JLabel existingServersLabel;
    public static javax.swing.JTabbedPane forkServerTabbedPane;
    private javax.swing.JLabel hostNameLabel;
    private javax.swing.JTextField hostNameTextField;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JComboBox listEnvironmentComboBox;
    private javax.swing.JLabel listEnvironmentLabel;
    private javax.swing.JComboBox listServerComboBox;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JPanel manageServersPanel;
    private javax.swing.JPanel monitorRemoteProcessDashboardPanel;
    private javax.swing.JTabbedPane monitorRemoteProcessTabbedPane;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JLabel portLabel;
    private javax.swing.JTextField portTextField;
    private javax.swing.JComboBox processComboBox;
    private javax.swing.JInternalFrame processInternalFrame;
    private javax.swing.JLabel processNameLabel;
    private javax.swing.JTextField processNameTextField;
    private javax.swing.JLabel processRunningonPortLabel;
    private javax.swing.JTextField processRunningonPortTextField;
    private javax.swing.JComboBox processRunningonServerComboBox;
    private javax.swing.JLabel processRunningonServerLabel;
    public static javax.swing.JTextArea remoteProcessTextArea;
    private static javax.swing.JButton runHealthCheckButton;
    private javax.swing.JButton saveEnvironmentButton;
    private javax.swing.JButton saveProcessButton;
    private javax.swing.JButton saveRemoteServerButton;
    private javax.swing.JButton saveServerButton;
    private javax.swing.JLabel serverDirectoryLabel;
    private javax.swing.JTextField serverDirectoryTextField;
    private javax.swing.JLabel serverNameLabel;
    private javax.swing.JTextField serverNameTextField;
    private javax.swing.JPasswordField serverPasswordTextField;
    private javax.swing.JButton startServerButton;
    private javax.swing.JTabbedPane startStopServersTabbedPane;
    private javax.swing.JButton stopServerButton;
    public static javax.swing.JComboBox typeOfServerComboBox;
    private javax.swing.JLabel typeOfServerLabel;
    private javax.swing.JTextField userNameTextField;
    // End of variables declaration//GEN-END:variables
}
